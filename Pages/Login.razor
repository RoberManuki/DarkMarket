@page "/login"

@using DarkMarket.Models

@inject DarkMarket.Services.AuthService AuthService
@inject NavigationManager NavigationManager

<div class="login-container">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username" class="input-label">Username:</label>
            <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="form-group">
            <label for="password" class="input-label">Password:</label>
            <InputText id="password" @bind-Value="loginModel.Password" class="form-control" type="@passwordInputType" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <div class="show-password-row">
            <button type="button" class="btn-show" @onclick="TogglePasswordVisibility">
                @(showPassword ? "Ocultar" : "Mostrar") senha
            </button>
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isLoading">
            @(isLoading ? "Entrando..." : "Entrar")
        </button>
    </EditForm>

    @if (loginFailed)
    {
        <div class="alert alert-danger mt-2">@loginErrorMessage</div>
    }
    @if (loginSuccess)
    {
        <div class="alert alert-success mt-2">Login realizado com sucesso! Bem-vindo.</div>
    }
</div>

@code {
    private LoginModel loginModel = new();
    private bool loginFailed = false;
    private bool loginSuccess = false;
    private bool isLoading = false;
    private bool showPassword = false;
    private string loginErrorMessage = string.Empty;

    private string passwordInputType => showPassword ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        loginFailed = false;
        loginSuccess = false;
        loginErrorMessage = string.Empty;

        var result = await AuthService.Login(loginModel.Username, loginModel.Password);
        if (result)
        {
            loginSuccess = true;
            NavigationManager.NavigateTo("/dashboard");
        }
        else
        {
            loginFailed = true;
            loginErrorMessage = "Usuário ou senha inválidos. Tente novamente.";
        }
        isLoading = false;
    }
}